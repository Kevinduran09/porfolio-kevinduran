---
// Componente de animación Lottie optimizado para Astro
interface Props {
  class?: string;
  width?: string;
  height?: string;
  autoplay?: boolean;
  loop?: boolean;
  speed?: number;
}

const {
  class: className = "",
  width = "280px",
  height = "280px",
  autoplay = true,
  loop = true,
  speed = 1,
} = Astro.props;
---

<div
  id="lottie-container"
  class={`lottie-animation ${className}`}
  style={`width: ${width}; height: ${height};`}
  data-autoplay={autoplay}
  data-loop={loop}
  data-speed={speed}
>
  <!-- Fallback content -->
  <div class="lottie-fallback flex items-center justify-center h-full">
    <div class="animate-pulse text-gray-400">
      <svg class="w-12 h-12" fill="currentColor" viewBox="0 0 24 24">
        <path
          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
        ></path>
      </svg>
    </div>
  </div>
</div>

<script>
  // Función optimizada para cargar Lottie
  async function loadLottieAnimation() {
    try {
      const lottie = await import("lottie-web");

      const container = document.getElementById("lottie-container");
      if (!container) return;

      const autoplay = container.dataset.autoplay === "true";
      const loop = container.dataset.loop === "true";
      const speed = parseFloat(container.dataset.speed || "1");

      const animation = lottie.default.loadAnimation({
        container: container,
        renderer: "svg",
        loop: loop,
        autoplay: autoplay,
        path: "/animations/developer-animation.json",
        rendererSettings: {
          progressiveLoad: true,
          hideOnTransparent: true,
        },
      });

      animation.setSpeed(speed);

      animation.addEventListener("data_ready", () => {
        container.classList.add("lottie-loaded");
      });

      animation.addEventListener("data_failed", (error) => {
        console.error("Error cargando animación Lottie:", error);
        container.classList.add("lottie-error");
      });

      // Intersection Observer para optimización
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animation.play();
            } else {
              animation.pause();
            }
          });
        },
        { threshold: 0.1 },
      );

      observer.observe(container);
    } catch (error) {
      console.error("Error inicializando Lottie:", error);
    }
  }

  // Cargar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", loadLottieAnimation);
  } else {
    loadLottieAnimation();
  }
</script>

<style>
  .lottie-animation {
    position: relative;
    overflow: hidden;

    transition: all 0.3s ease;
  }

  .lottie-fallback {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(4px);
    border-radius: 12px;
  }

  .lottie-loaded .lottie-fallback {
    display: none;
  }

  .lottie-error {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
  }

  .lottie-error .lottie-fallback {
    background: rgba(255, 107, 107, 0.1);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .lottie-animation {
      border-radius: 8px;
      width: 250px !important;
      height: 250px !important;
    }
  }

  @media (max-width: 480px) {
    .lottie-animation {
      width: 200px !important;
      height: 200px !important;
    }
  }
</style>
